/**************************************************************************************
 *   Library file containing functions directly implementing components' semanthics.  *
 *************************************************************************************/
 







/** Overrides companion portraits which are not used by the (unmodified) game with new portraits of
  * the depicated companion. These will generally be portraits from other games included for the use
  * by charname, although unifying the NPCs to always use the first portrait will affect which files
  * exactly are unused. If `defaults==0`, the user will be presented with a prompt asking to
  * choose between alternatives, where several versions of a portrait are available.
  * Sets the `installed_unused_npcs` flag.
  */
DEFINE_ACTION_FUNCTION copy_unused_npc_portraits
	INT_VAR
		defaults = 666
	RET
		/** List of overriden unused npc portraits. */
		filelist
		/** Concatenation of filelist and npc_portrait_overrides returned for conveniance. */
		installed
		/** Names of NPCs with overriden unused portraits. */
		names
	BEGIN
		ACTION_IF defaults > 1 THEN BEGIN
			OUTER_SET defaults = use_default_portraits
		END

		ACTION_IF ~%unified_portraits%~ STR_EQ ~~ THEN BEGIN
			ACTION_IF defaults THEN BEGIN
				LOG ~Override companion portraits from other games with their default portraits~
			END ELSE BEGIN
				LOG ~Override companion portraits from other games with their selected alternatives~
			END
			LAF copy_npc_portraits 
				INT_VAR defaults = defaults //list_only = list_only
				STR_VAR role = ~canonnpcs~ game = ~%other_games%~ when = ~exists~ exclude = ~%npc_portrait_overrides%~
				RET filelist names END
		END ELSE BEGIN
			ACTION_IF defaults THEN BEGIN
				LOG ~Override not unified, unused companion portraits with their default portraits~
			END ELSE BEGIN
				LOG ~Override not unified, unused companion portraits with their selected alternatives~
			END
			LAF copy_npc_portraits 
				INT_VAR defaults = defaults //list_only = list_only
				STR_VAR role = ~canonnpcs~ game = ~%any_game%~ when = ~exists~ exclude = ~%npc_portrait_overrides%~
				RET filelist names END
		
		END
		
		OUTER_TEXT_SPRINT installed ~%npc_portrait_overrides%%filelist%~
	END
	
	
	



/** Overrides all portraits which depict companions not present	in the (unmodified) game with their
  * appropriate portraits. If `defaults==0`, the user will be presented with a prompt asking to choose
  * between alternative versions when multiple are available instead of using the default portraits.
  */
DEFINE_ACTION_FUNCTION copy_absent_npc_portraits
	INT_VAR
		defaults = 666
	RET
		/** Concatenated list of installed files, each surrounded by a pair of '/'. */
		filelist 
		/** Names of companions (4-th level directory names) separated by regexp alternative \| */
		names 
	BEGIN
		ACTION_IF defaults > 1 THEN BEGIN
			OUTER_SET defaults = use_default_portraits
		END
	
		LOG ~List portraits from other games of present companions~
		LAF list_npc_portraits 
			STR_VAR role = ~canonnpcs~ game = ~%other_games%~ name = ~%canon_game_npcs%~ when = ~always~
			RET exclude = filelist END

		LOG ~Copy portraits for companions not present in the game~		
		LAF copy_npc_portraits
			INT_VAR list_only = list_only defaults = defaults
			STR_VAR role = ~canonncps~ game = ~%other_games%~ exclude = ~%npc_portrait_overrides%%exclude%~ when = ~Ä…lways~
			RET filelist names END
	END
	
	

	






/** Patches all official companions in the game to use portrait files from the game of their first 
  * (official) appearance. The unification's scope is restricted to only those companions, who already
  * received portraits from this mod (hence if mod npc portraits component is not installed, none of these
  * npcs will be affected or their portraits copied). This is done using the same mechanism with everything else: 
  * copying portraits from under the 'unifiednpcs' directory. Additionally, global variable %npc_portrait_overrides%
  * is updated to reflect the changes (new portraits added, previous, now unused, removed). Once the macro 
  * returns, %unified_portraits% will contain the list of portraits used by *unified* (not all) npcs in this game,
  * while %unified_npcs% will contain a regexp alternative of names of the unified npcs (bottom-level directory names).
  */
DEFINE_ACTION_MACRO unify_npc_portraits	
	BEGIN		
		LOG ~Update NPCs using different portraits in different games to reference always the first one instead.~
		LAF copy_npc_portraits 
			STR_VAR role = ~unifiednpcs~ name = ~%npcs_installed%~
			RET unified_portraits = filelist unified_npcs = names
		END
		
		LOG ~Listing unused portraits of unified NPCs in this game.~
		LAF list_npc_portraits
			STR_VAR role = ~%companions_selected%~ name = ~%unified_npcs%~  exclude = ~%unified_portraits%~ 
			RET old_portraits = filelist END
		
		//Remove unused files from the installed list var
		LAF	remove_from_list 
			STR_VAR list = ~%npc_portrait_overrides%~ exclude = ~%unified_portraits%%old_portraits%~
			RET npc_portrait_overrides = filelist END

		OUTER_TEXT_SPRINT npc_portrait_overrides ~%npc_portrait_overrides%%unified_portraits%~
		LOG ~NPC portraits used: %npc_portrait_overrides%~
	
	END
	





/** Lists the portraits of official NPCs used in the game. Unless the portraits have been unified
  * (that is, character files always refer to the portrait from the game of their first appearance),
  * this is simply ~%canon_game_portraits%~. Otherwise it lists the first portrait set for every
  * official NPC in the game.
  */
DEFINE_ACTION_FUNCTION used_npc_portraits
	RET
		filelist
	BEGIN
		OUTER_TEXT_SPRINT used ~%canon_game_portraits%~
			
		ACTION_IF NOT (unified_portraits STR_EQ ~~) THEN BEGIN
			
			LOG ~List unused portraits from this game of unified NPCs.~
			LAF list_npc_portraits
				STR_VAR role = ~canonnpcs~ name = ~%unified_npcs%~ exclude = ~%unified_portraits%~ when = ~exists~
				RET unused = filelist END
				
			LOG ~List portraits from this game used by official companions.~
			LAF list_npc_portraits 
				STR_VAR role = ~canonnpcs~ exclude = ~%unused%~ 
				RET used = filelist END //this doesn't include unified portraits from earlier games, see below
				
			OUTER_TEXT_SPRINT used ~%used%%unified_portraits%~
		END 
	
	END





		
/** Makes available copies of specified default NPC portraits to player characters. The files will use
  * different names, consistent with the naming scheme of player portraits. The copying is limited to
  * the portraits from directories under the standard depth of 4, excluding any alternative subdirectories.
  * All references are followed, including those that pick between alternative portrait versions, meaning
  * user choices are recognized.
  * This function browses the portraits under two separate directory tries: one with npc portraits,
  * specified by 'role', which is used to filter required portrait sets using the trie structure, 
  * and the other is the charname/npcs subtrie, which serves as a whitelist of files legal for CHARNAME.
  * The renaming trick is done by including an additional '.ref' file with every suitable NPC together
  * with their standard 'override' portraits. The basename of the ref file is the one used when 
  * copying/installing the portrait. The same ref file (for simplicitly, although the name is verfied)
  * must be again present in the directory 'charname/npcs/<gender>/<role>' to be actually copied.
  */  
DEFINE_ACTION_FUNCTION grant_pc_default_npc_portraits		
	STR_VAR
		role = ~*~
		game = ~*~
		name = ~*~
		exclude = ~~
	RET
		males 
		females
	BEGIN
		LOG ~List all the default portraits of %role% (including aliases for charname) not on the list.~
		LAF list_npc_portraits 
			STR_VAR 
				role = ~%role%~ game = ~%game%~ gender = ~male\|female~ name = ~%name%~ 
				exclude = ~%exclude%~ when = ~always~
			RET include = filelist END

		LOG ~Copy charname aliases for portraits of male %role%~
		LAF copy_pc_portraits 
			STR_VAR 
				name = ~%role%~ role = ~npcs~ gender = ~male~ //name before role or it would be set to npcs
				include = ~%include%~ target = ~%pc_install_target%~
			RET males = filelist END

		LOG ~Copy charname aliases for portraits of female %role%~
		LAF copy_pc_portraits 
			INT_VAR defaults = 1
			STR_VAR 
				name = ~%role%~ role = ~npcs~ gender = ~female~ 
				include = ~%include%~ target = ~%pc_install_target%~
			RET females = filelist END
	END






/** Makes available copies of alternative NPC portraits to player characters. The files will use
  * different names, consistent with the naming scheme of player portraits. Whenever an alternatives
  * directory is present under an npc (portrait set) directory, versions from all subdirectoreis are used.
  * In the case of its absence, the usual file located directly in the npc directory are copied.
  * This function browses the portraits under two separate directory tries: one with npc portraits,
  * specified by 'role', which is used to filter required portrait sets using the trie structure, 
  * and the other is the charname/npcs subtrie, which serves as a whitelist of files legal for CHARNAME.
  * The renaming trick is done by including an additional '.ref' file with every suitable NPC together
  * with their standard 'override' portraits. The basename of the ref file is the one used when 
  * copying/installing the portrait. The same ref file (for simplicitly, although the name is verfied)
  * must be again present in the directory 'charname/npcs/<gender>/<role>' to be actually copied.
  */  
DEFINE_ACTION_FUNCTION grant_pc_alternative_npc_portraits
	STR_VAR
		role = ~*~
		game = ~*~
		name = ~*~
		exclude = ~~
	RET
		males
		females
	BEGIN
		LOG ~List portraits of %role% including aliases for charname~
		LAF copy_npc_alternatives
			INT_VAR list_only = 1
			STR_VAR	
				role = ~%role%~ 
				game = ~%game%~ 
				gender = ~male\|female~ 
				name = ~%name%~
				exclude = ~%exclude%~ 
				when = ~always~
				target = ~%pc_install_target%~
			RET whitelist = filelist END
			
		LOG ~Copy charname aliases for default portraits of male %role%~
		LAF copy_pc_portraits
			STR_VAR 
				name = ~%role%~ role = ~npcs~ gender = ~male~ 
				include = ~%whitelist%~ target = ~%pc_install_target%~
			RET males = filelist END

		LOG ~Copy charname aliases for alternative portraits of female %role%~
		LAF copy_pc_portraits
			STR_VAR 
				name = ~%role%~ role = ~npcs~ gender = ~female~  
				include = ~%whitelist%~ target = ~%pc_install_target%~
			RET females = filelist END

	END
		





/** Installs for player characters the default portraits of absent companions.
  * The installed files will be renamed according to the CHARNAME portrait naming scheme from the
  * originals and come from the default pool - that is the one which would be copied without prompting
  * the user for selecting between the alternatives. It is a slightly higher-level function than
  * `grant_pc_default_npc_portraits` which is invoked after determining the portrait sets to use
  * based on the npc's presence in the game.
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_defaults
	STR_VAR
		role = ~?~	
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %role% for this game when they %when%~
		LAF list_npc_portraits STR_VAR role = ~%role%~ gender = ~male\|female~ when = ~%when%~ 
			RET present = names END
			
		LOG ~List the default portraits from all games of %role% from this game (including aliases for charname)~
		LAF list_npc_portraits STR_VAR role = ~%role%~ game = ~%any_game%~ name = ~%present%~ when = ~always~
			RET exclude = filelist END
		
		LAF grant_pc_default_npc_portraits STR_VAR role = ~%role%~ exclude = ~%exclude%~ 
			RET males females END
	END
		
		
		



/** Installs for player characters all non-default versions of portraits for absent npcs.
  * In cases where there is no alternatives subdirectory in the npcs folder, their portrait set
  * is ommitted entirely. Otherwise files from all version subdirectories which don't match in name
  * a file located directly in the npc directory are copied. This in effect includes only renamed 
  * ref files dedicated to use by CHARNAME, which are not the default portrait (or the selected
  * personally by the user during the installation).
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_alternatives
	STR_VAR	
		role = ~?~
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %role% for this game when they %when%~
		LAF list_npc_portraits STR_VAR role = ~%role%~ gender = ~male\|female~ when = ~%when%~
			RET present = names END
			
		LOG ~List default portraits of all %role% (including aliases for charname)~
		LAF list_npc_portraits 
			STR_VAR 
				role = ~%role%~ game = ~%any_game%~ gender = ~male\|female~ when = ~Ä…lways~
			RET defaults = filelist END

		LOG ~List portraits from all games of %role% for this game (including aliases for charname) which are not on the defaults list~
		LAF copy_npc_alternatives 
			INT_VAR list_only = 1
			STR_VAR 
				role = ~%role%~ game = ~%any_game%~ gender = ~male\|female~ name = ~%present%~ 
				exclude = ~%defaults%~ when = ~always~
			RET filelist END
		OUTER_TEXT_SPRINT exclude ~%defaults%%filelist%~ 

		LAF grant_pc_alternative_npc_portraits STR_VAR role = ~%role%~ exclude = ~%exclude%~ 
			RET males females END
	END





/** Installs for the use by CHARNAME portrait sets of NPCs not present in this particular game.
  * Whenever multiple versions are available for an NPC, all are used. This is equivalent
  * to calling both `grant_pc_absent_npc_defaults` and `grant_pc_absent_npc_alternatives`.
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_portraits
	STR_VAR
		role = ~?~
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %role% for this game when they %when%~
		LAF list_npc_portraits STR_VAR role = ~%role%~ gender = ~male\|female~ when = ~%when%~ 
			RET present = names END
			
		LOG ~List all portraits from all games of %role% for this game (including aliases for charname)~
		LAF list_npc_alternatives STR_VAR role = ~%role%~ game = ~%any_game%~ name = ~%present%~ when = ~always~
			RET exclude = filelist END
			
		LAF grant_pc_alternative_npc_portraits STR_VAR role = ~%role%~ exclude = ~%exclude%~ 
			RET males females END
	
	END
	
	
	
	


/** List the names of all NPCs whose replaced potraits appear in the selection screen and all their
  * default portrait files, including other resolutions and aliases for CHARNAME.
  */
DEFINE_ACTION_FUNCTION list_installed_npcs
	RET
		names
		filelist
	BEGIN
	//List portraits in the selection screen overriden with appropriate new npc portraits
	LOG ~NPC portraits: %npc_portrait_overrides%~
	LOG ~PC  portraits: %pc_portrait_overrides%~ 
	LAF list_pc_selection 
		STR_VAR include = ~%npc_portrait_overrides%~ exclude = ~%pc_portrait_overrides%~ 
		RET available = filelist END //present in the selection screen and overriden with new npc portraits
	LOG ~NPC portraits on screen: %available%~
	
	LOG ~List NPCs for which new portraits are already available in the selection screen~
	LAF list_npc_portraits
		STR_VAR 
			role = ~canonnpcs~ game = ~%any_game%~ gender = ~male\|female~ 
			include = ~%available%~ when = ~exists~
		RET names END //names of NPCs with portraits in the 'available' list
		
	LOG ~List all portraits (including CHARNAME aliases) of NPCs with new portraits in the selection screen~
	LAF list_npc_portraits
		STR_VAR 
			role = ~canonnpcs~ game = ~%any_game%~ gender = ~male\|female~ name = ~%names%~ when = ~always~
		RET filelist END //'available' portraits plus charname aliases of included NPCs
	
	END




	

/** Create a pool of portraits which might be optionally granted to player characters based on
  * the choice of installed components. This pool is created in the %pc_pool_dir% directory
  * and contains overrides of default portrait files. Various charname portrait sets contain
  * references to files located in the pool; deleting a file from the pool invalidates the
  * reference and prevents the portrait from being installed. At the same time it allows a
  * portrait file to be installed under different names, based on selected components.
  * For example, a replacement for a companion portrait might be installed under its name
  * and removed from the pool, or as a new file via a differently named reference pointing
  * to that image in the pool.
  */
DEFINE_ACTION_FUNCTION pool_pc_defaults 
	BEGIN
		PRINT ~Creating pool of CHARNAME portraits named after existing pc and npc portraits...~
		LAF copy_pc_portraits STR_VAR role = ~override~ target = ~%pc_pool_dir%~ END
	END
	


	
	
	
	
/** Overrides specified portraits, which must already exist in the game. 
  * Copied files are removed from the %pc_pool_dir%, invalidating any file refs to them.
  * This effect is used to prevent adding that portrait in the future 
  * when copying charname sets. The use of reference makes it possible to use different names
  * when adding portrait files *not removed from the pool* to the portraits folder/selection screen,
  * resulting in better organization and sorting order.
  */
DEFINE_ACTION_FUNCTION override_from_pc_pool
	INT_VAR 
		/** Specifies if overriding files should be deleted from the pool after copying. */
		depool = 1
		/** Do not copy, simply list what would be overriden. Forces depool=0. */
		list_only = 0
	STR_VAR
		name = ~~
		include = ~*~
		exclude = ~{}~
	RET
		filelist
	BEGIN
		LOG ~Using CHARNAME portraits %name% to override in-game files~
		ACTION_IF ~%exclude%~ STR_EQ ~{}~ THEN BEGIN
			OUTER_TEXT_SPRINT exclude ~%npc_portrait_overrides%~
		END
		
		LAF copy_npc_portraits
			INT_VAR list_only = list_only defaults = 1
			STR_VAR root = ~charname~ role = ~override~ name = ~%name%~ 
			        when = ~exists~ exclude = ~%exclude%~ include = ~%include%~
			RET filelist END
			
		ACTION_IF depool AND NOT list_only THEN BEGIN
			LAF delete_files STR_VAR dir = ~%pc_pool_dir%~ files = ~%filelist%~ END
		END
	END

	








