/**************************************************************************************
 *   Library file containing functions directly implementing components' semanthics.  *
 *************************************************************************************/
 



/** Overrides companion portraits which are not used by the (unmodified) game with new portraits of
  * the depicated companion. These will generally be portraits from other games included for the use
  * by charname, although unifying the NPCs to always use the first portrait will affect which files
  * exactly are unused. If `defaults==0`, the user will be presented with a prompt asking to
  * choose between alternatives, where several versions of a portrait are available.
  * Sets the `installed_unused_npcs` flag.
  */
DEFINE_ACTION_FUNCTION install_unused_npcs
	INT_VAR
		defaults = 666
	RET
		/** List of overriden unused npc portraits. */
		filelist
		/** Concatenation of filelist and npc_portraits_installed returned for conveniance. */
		installed
		/** Names of NPCs with overriden unused portraits. */
		names
	BEGIN
		ACTION_IF defaults > 1 THEN BEGIN
			OUTER_SET defaults = use_default_portraits
		END

		ACTION_IF ~%unified_portraits%~ STR_EQ ~~ THEN BEGIN
			ACTION_IF defaults THEN BEGIN
				LOG ~Override companion portraits from other games with their default portraits~
			END ELSE BEGIN
				LOG ~Override companion portraits from other games with their selected alternatives~
			END
			LAF copy_npc_portraits 
				INT_VAR defaults = defaults //list_only = list_only
				STR_VAR npctype = ~canonnpcs~ game = ~%other_games%~ when = ~exists~ exclude = ~%npc_portraits_installed%~
				RET filelist names END
		END ELSE BEGIN
			ACTION_IF defaults THEN BEGIN
				LOG ~Override not unified, unused companion portraits with their default portraits~
			END ELSE BEGIN
				LOG ~Override not unified, unused companion portraits with their selected alternatives~
			END
			LAF copy_npc_portraits 
				INT_VAR defaults = defaults //list_only = list_only
				STR_VAR npctype = ~canonnpcs~ game = ~%any_game%~ when = ~exists~ exclude = ~%npc_portraits_installed%~
				RET filelist names END
		
		END
		
		OUTER_TEXT_SPRINT installed ~%npc_portraits_installed%%filelist%~
	END
	
	
	



/** Overrides all portraits which depict companions not present	in the (unmodified) game with their
  * appropriate portraits. If `defaults==0`, the user will be presented with a prompt asking to choose
  * between alternative versions when multiple are available instead of using the default portraits.
  */
DEFINE_ACTION_FUNCTION install_absent_npcs
	INT_VAR
		defaults = 666
	RET
		/** Concatenated list of installed files, each surrounded by a pair of '/'. */
		filelist 
		/** Names of companions (4-th level directory names) separated by regexp alternative \| */
		names 
	BEGIN
		ACTION_IF defaults > 1 THEN BEGIN
			OUTER_SET defaults = use_default_portraits
		END
	
		LOG ~List portraits from other games of present companions~
		LAF list_npc_portraits 
			STR_VAR npctype = ~canonnpcs~ game = ~%other_games%~ name = ~%canon_game_npcs%~ when = ~always~
			RET exclude = filelist END

		LOG ~Copy portraits for companions not present in the game~		
		LAF copy_npc_portraits
			INT_VAR list_only = list_only defaults = defaults
			STR_VAR npctype = ~canonncps~ game = ~%other_games%~ exclude = ~%npc_portraits_installed%%exclude%~ when = ~Ä…lways~
			RET filelist names END
	END
	
	

	






/** Patches all official companions in the game to use portrait files from the game of their first 
  * (official) appearance. The unification's scope is restricted to only those companions, who already
  * received portraits from this mod (hence if mod npc portraits component is not installed, none of these
  * npcs will be affected or their portraits copied). This is done using the same mechanism with everything else: 
  * copying portraits from under the 'unifiednpcs' directory. Additionally, global variable %npc_portraits_installed%
  * is updated to reflect the changes (new portraits added, previous, now unused, removed). Once the macro 
  * returns, %unified_portraits% will contain the list of portraits used by *unified* (not all) npcs in this game.
  */
DEFINE_ACTION_MACRO unify_npc_portraits	
	BEGIN		
		LOG ~Update NPCs using different portraits in different games to reference always the first one instead.~
		LAF copy_npc_portraits 
			STR_VAR npctype = ~unifiednpcs~ name = ~%npcs_installed%~
			RET unified_portraits = filelist unified_npcs = names
		END
		
		LOG ~Listing unused portraits of unified NPCs in this game.~
		LAF list_npc_portraits
			STR_VAR npctype = ~%companions_selected%~ name = ~%unified_npcs%~  exclude = ~%unified_portraits%~ 
			RET unused_unified_portraits = filelist END
		
		//Remove unused files from the installed list var
		LAF	remove_from_list 
			STR_VAR list = ~%npc_portraits_installed%~ exclude = ~%unified_portraits%%unused_unified_portraits%~
			RET npc_portraits_installed = filelist END

		OUTER_TEXT_SPRINT npc_portraits_installed ~%npc_portraits_installed%%unified_portraits%~
		LOG ~NPC portraits used: %npc_portraits_installed%~
	
	END
	





/** Lists the portraits of official NPCs used in the game. Unless the portraits have been unified
  * (that is, character files always refer to the portrait from the game of their first appearance),
  * this is simply ~%canon_game_portraits%~. Otherwise it lists the first portrait set for every
  * official NPC in the game.
  */
DEFINE_ACTION_FUNCTION used_portraits
	RET
		filelist
	BEGIN
		OUTER_TEXT_SPRINT used ~%canon_game_portraits%~
			
		ACTION_IF NOT (unified_portraits STR_EQ ~~) THEN BEGIN
			
			LOG ~List unused portraits from this game of unified NPCs.~
			LAF list_npc_portraits
				STR_VAR npctype = ~canonnpcs~ name = ~%unified_npcs%~ exclude = ~%unified_portraits%~
				RET unused = filelist END
				
			LOG ~List portraits from this game used by official companions.~
			LAF list_npc_portraits 
				STR_VAR npctype = ~canonnpcs~ exclude = ~%unused%~ 
				RET used = filelist END //this doesn't include unified portraits from earlier games, see below
				
			OUTER_TEXT_SPRINT used ~%used%%unified_portraits%~
		END 
	
	END





		
/** Makes available copies of specified default NPC portraits to player characters. The files will use
  * different names, consistent with the naming scheme of player portraits. The copying is limited to
  * the portraits from directories under the standard depth of 4, excluding any alternative subdirectories.
  * All references are followed, including those that pick between alternative portrait versions, meaning
  * user choices are recognized.
  * This function browses the portraits under two separate directory tries: one with npc portraits,
  * specified by 'npctype', which is used to filter required portrait sets using the trie structure, 
  * and the other is the charname/npcs subtrie, which serves as a whitelist of files legal for CHARNAME.
  * The renaming trick is done by including an additional '.ref' file with every suitable NPC together
  * with their standard 'override' portraits. The basename of the ref file is the one used when 
  * copying/installing the portrait. The same ref file (for simplicitly, although the name is verfied)
  * must be again present in the directory 'charname/npcs/<gender>/<npctype>' to be actually copied.
  */  
DEFINE_ACTION_FUNCTION grant_pc_default_npc_portraits		
	STR_VAR
		npctype = ~~
		game = ~~
		name = ~~
		exclude = ~~
	RET
		males 
		females
	BEGIN
		ACTION_IF ~%game%~ STR_EQ ~~ THEN BEGIN
			OUTER_TEXT_SPRINT game ~%any_game%~
		END
		LOG ~List all the default portraits of %npctype% (including aliases for charname) not on the list.~
		LAF list_npc_portraits 
			STR_VAR 
				npctype = ~%npctype%~ game = ~%game%~ gender = ~male\|female~ name = ~%name%~ 
				exclude = ~%exclude%~ when = ~always~
			RET include = filelist END

		LOG ~Copy charname aliases for portraits of male %npctype%~
		LAF copy_pc_portraits 
			STR_VAR 
				group = ~npcs~ name = ~%npctype%~ gender = ~male~ 
				include = ~%include%~ target = ~%pc_install_target%~
			RET males = filelist END
		//OUTER_TEXT_SPRINT male_portrait_list ~%male_portrait_list%%males%~

		LOG ~Copy charname aliases for portraits of female %npctype%~
		LAF copy_pc_portraits 
			INT_VAR defaults = 1
			STR_VAR 
				group = ~npcs~ name = ~%npctype%~ gender = ~female~ 
				include = ~%include%~ target = ~%pc_install_target%~
			RET females = filelist END
		//OUTER_TEXT_SPRINT female_portrait_list ~%female_portrait_list%%females%~	
	END






/** Makes available copies of alternative NPC portraits to player characters. The files will use
  * different names, consistent with the naming scheme of player portraits. Whenever an alternatives
  * directory is present under an npc (portrait set) directory, versions from all subdirectoreis are used.
  * In the case of its absence, the usual file located directly in the npc directory are copied.
  * This function browses the portraits under two separate directory tries: one with npc portraits,
  * specified by 'npctype', which is used to filter required portrait sets using the trie structure, 
  * and the other is the charname/npcs subtrie, which serves as a whitelist of files legal for CHARNAME.
  * The renaming trick is done by including an additional '.ref' file with every suitable NPC together
  * with their standard 'override' portraits. The basename of the ref file is the one used when 
  * copying/installing the portrait. The same ref file (for simplicitly, although the name is verfied)
  * must be again present in the directory 'charname/npcs/<gender>/<npctype>' to be actually copied.
  */  
DEFINE_ACTION_FUNCTION grant_pc_alternative_npc_portraits
	STR_VAR
		npctype = ~~
		game = ~~
		name = ~~
		exclude = ~~
	RET
		males
		females
	BEGIN
		ACTION_IF ~%game%~ STR_EQ ~~ THEN BEGIN
			OUTER_TEXT_SPRINT game ~%any_game%~
		END
		LOG ~List portraits of %npctype% including aliases for charname~
		LAF copy_npc_alternatives
			INT_VAR list_only = 1
			STR_VAR	
				npctype = ~%npctype%~ 
				game = ~%game%~ 
				gender = ~male\|female~ 
				name = ~%name%~
				exclude = ~%exclude%~ 
				when = ~always~
				target = ~%pc_install_target%~
			RET whitelist = filelist END
			
		LOG ~Copy charname aliases for defult portraits of male %npctype%~
		LAF copy_pc_portraits
			STR_VAR 
				group = ~npcs~ gender = ~male~ name = ~%npctype%~ 
				include = ~%whitelist%~ target = ~%pc_install_target%~
			RET males = filelist END
		//OUTER_TEXT_SPRINT male_portrait_list ~%male_portrait_list%%males%~

		LOG ~Copy charname aliases for alternative portraits of female %npctype%~
		LAF copy_pc_portraits
			STR_VAR 
				group = ~npcs~ gender = ~female~ name = ~%npctype%~ 
				include = ~%whitelist%~ target = ~%pc_install_target%~
			RET females = filelist END
		//OUTER_TEXT_SPRINT female_portrait_list ~%female_portrait_list%%females%~

	END
		





/** Installs for player characters the default portraits of absent companions.
  * The installed files will be renamed according to the CHARNAME portrait naming scheme from the
  * originals and come from the default pool - that is the one which would be copied without prompting
  * the user for selecting between the alternatives. It is a slightly higher-level function than
  * `grant_pc_default_npc_portraits` which is invoked after determining the portrait sets to use
  * based on the npc's presence in the game.
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_defaults
	STR_VAR
		npctype = ~~	
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %npctype% for this game when they %when%~
		LAF list_npc_portraits STR_VAR npctype = ~%npctype%~ gender = ~male\|female~ when = ~%when%~ 
			RET present = names END
			
		LOG ~List the default portraits from all games of %npctype% from this game (including aliases for charname)~
		LAF list_npc_portraits STR_VAR npctype = ~%npctype%~ game = ~%any_game%~ name = ~%present%~ when = ~always~
			RET exclude = filelist END
		
		LAF grant_pc_default_npc_portraits STR_VAR npctype = ~%npctype%~ exclude = ~%exclude%~ 
			RET males females END
	END
		
		
		



/** Installs for player characters all non-default versions of portraits for absent npcs.
  * In cases where there is no alternatives subdirectory in the npcs folder, their portrait set
  * is ommitted entirely. Otherwise files from all version subdirectories which don't match in name
  * a file located directly in the npc directory are copied. This in effect includes only renamed 
  * ref files dedicated to use by CHARNAME, which are not the default portrait (or the selected
  * personally by the user during the installation).
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_alternatives
	STR_VAR	
		npctype = ~~
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %npctype% for this game when they %when%~
		LAF list_npc_portraits STR_VAR npctype = ~%npctype%~ gender = ~male\|female~ when = ~%when%~
			RET present = names END
			
		LOG ~List default portraits of all %npctype% (including aliases for charname)~
		LAF list_npc_portraits 
			STR_VAR 
				npctype = ~%npctype%~ game = ~%any_game%~ gender = ~male\|female~ when = ~Ä…lways~
			RET exclude = filelist END

		LOG ~List portraits from all games of %npctype% for this game (including aliases for charname) which are not on the defaults list~
		LAF copy_npc_alternatives 
			INT_VAR list_only = 1
			STR_VAR 
				npctype = ~%npctype%~ game = ~%any_game%~ gender = ~male\|female~ name = ~%present%~ 
				exclude = ~%exclude%~ when = ~always~
			RET filelist END
		OUTER_TEXT_SPRINT exclude ~%exclude%%filelist%~ 

		LAF grant_pc_alternative_npc_portraits STR_VAR npctype = ~canonnpcs~ exclude = ~%exclude%~ 
			RET males females END
	END





/** Installs for the use by CHARNAME portrait sets of NPCs not present in this particular game.
  * Whenever multiple versions are available for an NPC, all are used. This is equivalent
  * to calling both `grant_pc_absent_npc_defaults` and `grant_pc_absent_npc_alternatives`.
  */
DEFINE_ACTION_FUNCTION grant_pc_absent_npc_portraits
	STR_VAR
		npctype = ~~
		when = ~always~
	RET
		males
		females
	BEGIN
		LOG ~List %npctype% for this game when they %when%~
		LAF copy_npc_portraits STR_VAR npctype = ~%npctype%~ gender = ~male\|female~ when = ~%when%~ 
			RET present = names END
			
		LOG ~List all portraits from all games of %npctype% for this game (including aliases for charname)~
		LAF copy_npc_alternatives STR_VAR npctype = ~%npctype%~ game = ~%any_game%~ name = ~%present%~ when = ~always~
			RET exclude = filelist END
			
		LAF grant_pc_alternative_npc_portraits STR_VAR npctype = ~%npctype%~ exclude = ~%exclude%~ 
			RET males females END
	
	END
	
	
	
	


/** List the names of all NPCs whose new potraits appear in the selection screen and all their
  * default portrait files, including other resolutions and aliases for CHARNAME.
  */
DEFINE_ACTION_FUNCTION list_installed_npcs
	RET
		names
		filelist
	BEGIN
	//List portraits in the selection screen overriden with appropriate new npc portraits
	LAF list_pc_portraits 
		STR_VAR include = ~%npc_portraits_installed%~ exclude = ~%npc_portraits_overriden%~ 
		RET available = filelist END //present in the selection screen and overriden with new npc portraits
	LOG ~NPC portraits installed: %npc_portraits_installed%~
	LOG ~NPC portraits overriden: %npc_portraits_overriden%~
	LOG ~NPC portraits on screen: %available%~
	
	LOG ~List NPCs for which new portraits are already available in the selection screen~
	LAF list_npc_portraits
		STR_VAR npctype = ~canonnpcs~ include = ~%available%~ gender = ~male\|female~ when = ~exists~
		RET names END //names of NPCs with portraits in the 'available' list
		
	LOG ~List all portraits (including CHARNAME aliases) of NPCs with new portraits in the selection screen~
	LAF list_npc_portraits
		STR_VAR npctype = ~canonnpcs~ gender = ~male\|female~ name = ~%names%~ when = ~always~
		RET filelist END //'available' portraits plus charname aliases of included NPCs
	
	END




	

/** Create a pool of portraits which might be optionally granted to player characters based on
  * the choice of installed components. This pool is created in the %pc_pool_dir% directory
  * and contains overrides of default portrait files. Various charname portrait sets contain
  * references to files located in the pool; deleting a file from the pool invalidates the
  * reference and prevents the portrait from being installed. At the same time it allows a
  * portrait file to be installed under different names, based on selected components.
  * For example, a replacement for a companion portrait might be installed under its name
  * and removed from the pool, or as a new file via a differently named reference pointing
  * to that image in the pool.
  */
DEFINE_ACTION_FUNCTION pool_pc_defaults 
	BEGIN
		PRINT ~Creating pool of CHARNAME portraits named after existing pc and npc portraits...~
		LAF copy_pc_portraits STR_VAR group = ~override~ target = ~%pc_pool_dir%~ END
	END
	


	
	
	
	
/** Overrides specified portraits, which must already exist in the game. 
  * Copied files are removed from the %pc_pool_dir%, invalidating any file refs to them.
  * This effect is used to prevent adding that portrait in the future 
  * when copying charname sets. The use of reference makes it possible to use different names
  * when adding portrait files *not removed from the pool* to the portraits folder/selection screen,
  * resulting in better organization and sorting order.
  */
DEFINE_ACTION_FUNCTION override_from_pc_pool
	INT_VAR 
		/** Specifies if overriding files should be deleted from the pool after copying. */
		depool = 1
		/** Do not copy, simply list what would be overriden. Forces depool=0. */
		list_only = 0
	STR_VAR
		name = ~~
		include = ~*~
		exclude = ~{}~
	RET
		filelist
	BEGIN
		ACTION_IF ~%exclude%~ STR_EQ ~{}~ THEN BEGIN
			OUTER_TEXT_SPRINT exclude ~%npc_portraits_installed%~
		END
		LOG ~Using CHARNAME portraits %name% to override in-game files~
		LAF copy_npc_portraits
			INT_VAR list_only = list_only defaults = 1
			STR_VAR npctype = ~charname~ game = ~override~ name = ~%name%~ 
			        when = ~exists~ exclude = ~%exclude%~ include = ~%include%~
			RET filelist END
			
		ACTION_IF depool AND NOT list_only THEN BEGIN
			LAF delete_files STR_VAR dir = ~%pc_pool_dir%~ files = ~%filelist%~ END
		END
	END

	











//Unused stuff below	
	
	
/** Make portraits of the NPCs from the given game(s) available to players on character generation screen.
  * The type of the NPC defaults to 'canonnpcs' (official, joinable NPCs) but can be changed by the `npctype` parameter.
  * 
  * This function makes use of several global variables:
  *   %pc_install_target% defines the directory to which any *new* portraits will be copied.
  *     Overrides for existing files will go to 'override' as normal. Additionally, if the target directory
  *     is itself 'override', it is assumed this is an EE game and the portrait list should be patched in BGEE.LUA
  *     so that the portraits will be picked up. Other legal directories are 'portraits', either directly
  *     in the game directory, or under the user's folder. In these cases all new files are copied normally
  *     and should be recognized automatically by the game.
  *
  *  %npc_portraits_installed% contains a list of all npc characters in the game which received new portraits
  *    from some of the components of this mod. The list is in the shared "double '/'" format used by all functions
  *    and is used as the exclude parameter when copying in order not to override portraits which might have
  *    been manually selected from between alternatives.
  */
DEFINE_ACTION_FUNCTION grant_npc_portraits_to_pc
	STR_VAR
		npctype = ~canonnpcs~
		game = ~~
		exclude = ~\\~
	BEGIN
		ACTION_IF ~%exclude%~ STR_EQ ~\\~ THEN BEGIN
			OUTER_TEXT_SPRINT exclude ~%npc_portraits_installed%~
		END
		
		ACTION_IF ~%pc_install_target%~ STR_EQ ~override~ THEN BEGIN
			//First, remove all portraits from the game(s)- easier than verifying which are already there for other games.
			LAF remove_npc_portraits 
				STR_VAR npctype = ~%npctype%~ game = ~%game%~ exclude = ~%exclude%~
			END
			//Patch the portrait list with all specified NPC portraits. 
			LAF install_pc_portraits 
				STR_VAR root = ~%npctype%~ game = ~%game%~ exclude = ~%exclude%~
			END
		END ELSE BEGIN
			//override any of the specified NPC portraits existing, which weren't already overriden
			LAF copy_npc_portraits 
				STR_VAR npctype = ~%npctype%~ game = ~%game%~ 
				        target = ~%pc_install_target%~ when = ~exists~ exclude = ~%exclude%~ 
			END
			//copy any remaining portraits to the portrait directory
			//todo: this bypasses the whole renaming-by-ref-to-pool mechanism :(
			LAF copy_npc_portraits 
				STR_VAR 
					npctype = ~%npctype%~ 
					game = ~%game%~ 
					target = ~%pc_install_target%~
					when = ~not exists~
					exclude = ~%exclude%~
			END
		END
		
	END









DEFINE_ACTION_FUNCTION list_selected_alternatives
	STR_VAR
		/** Directory containing subdirectory 'alternatives'. */
		npc = ~~
	RET
		count
	RET_ARRAY
		/** list of files referenced from any '.ref' files in the 'npc' directory. */
		used_files
	BEGIN
		OUTER_SET count = 0
		ACTION_DEFINE_ARRAY used_files BEGIN END
		GET_FILE_ARRAY selections ~%npc%~ ~.*\.\(ref\|refs\)~
		
		ACTION_PHP_EACH selections AS _ => path BEGIN
			LAF strip_prefix STR_VAR string = ~%path%~ prefix = ~%npc%/~
				RET filename = suffix END
			OUTER_PATCH_SAVE basename ~%filename%~ BEGIN
				REPLACE_TEXTUALLY CASE_INSENSITIVE EXACT_MATCH ~.ref~ ~~
			END
			ACTION_IF ~%basename%.ref~ STR_EQ ~%filename%~ THEN BEGIN
				LAF ref_target STR_VAR reffile = ~%path%~ 
					RET used_file = target END
				ACTION_IF NOT ~%target%~ STR_EQ ~~ THEN BEGIN
					OUTER_PATCH_SAVE used_file ~%used_file%~ BEGIN
						REPLACE_TEXTUALLY CASE_INSENSITIVE EVALUATE_REGEXP ~\.\(bmp\|ref\)$~ ~~
					END
					OUTER_TEXT_SPRINT $used_files(~%count%~) ~%used_file%~
					OUTER_SET count += 1
					LOG ~          (%basename%):	'%used_file%'~				
				END
			END ELSE BEGIN //.refs file
				LAF refs_targets STR_VAR refsfile = ~%path%~
					RET refcount = count RET_ARRAY refs END
				ACTION_IF refcount THEN BEGIN
					ACTION_PHP_EACH refs AS basename => used_file BEGIN
						OUTER_PATCH_SAVE used_file ~%used_file%~ BEGIN
							REPLACE_TEXTUALLY CASE_INSENSITIVE EVALUATE_REGEXP ~\.\(bmp\|ref\)$~ ~~
						END
						OUTER_TEXT_SPRINT $used_files(~%count%~) ~%used_file%~
						OUTER_SET count += 1
						LOG ~          (%basename%):	'%used_file%'~
					END
				END
				ACTION_CLEAR_ARRAY refs
			END
		END
		
		ACTION_IF count == 0 THEN BEGIN
			ACTION_DEFINE_ARRAY used_files BEGIN ~~ END
		END
	END
	
	
	
	
	
	
	
DEFINE_ACTION_FUNCTION list_unused_npc_alternatives
	STR_VAR 
		/** Regexp for name of root directory with npc portraits (alternative from npcs|modnpcs|plotnpcs etc.)*/
		npctype = ~~
		/** Regexp for game directories to cover: bgee|sod|bg2ee */	
		game = ~~
		/** Regexp for gender directory grouping individual npcs. */
		gender = ~male\|female~ 
		/** Regexp for npc directory (i.e. name/identifier). */
		name = ~~ 
		/** Switch which decides if a file should be copied based on its existance in the game. Can be one of:
		  * 'exists' - override only; the file must already exist in the game.
		  * 'not exists' - only new portraits; don't copy if the file already exists
		  * 'always' - all portraits; copy regardless of previous presence.
		  * 'used' - the portrait must exist, or a file with creatures to patch specifies at least one existing creature (default). 
		  * 'not used' - the portrait file must not exist and no creatures would be updated to use it.
		  */
		when = ~used~
		/** List of file names (without extensions) that should be excluded from copying. 
		  * Each entry on the list should be surrounded with '/'. */
		exclude = ~~
	RET
		count 
	RET_ARRAY
		unused_files
	BEGIN
/*
		ACTION_IF (~%game%~ STRING_EQUAL ~~) THEN BEGIN 
			OUTER_TEXT_SPRINT game ~%game_dirs%~
		END
		ACTION_IF (~%name%~ STRING_EQUAL ~~) THEN BEGIN
			OUTER_TEXT_SPRINT name ~%any_dir%~
		END
		ACTION_IF defaults < 0 THEN BEGIN
			OUTER_SET defaults = use_default_portraits
		END
*/
		OUTER_SET count = 0
		LAF directory_defaults 
			INT_VAR defaults = defaults
			STR_VAR game = ~%game%~ gender = ~%gender%~ name = ~%name%~
			RET defaults game gender name END

		LOG ~List not used alternative portrait versions when file %when%~
		LOG ~Searching %npctype%/%game%/%name%/**~
		
		ACTION_IF NOT DIRECTORY_EXISTS ~%target%~ THEN BEGIN
			MKDIR ~%target%~
		END
		
		ACTION_DEFINE_ARRAY unused_files BEGIN END
		//OUTER_SET filecount = 0
		OUTER_SET npccount = 0
		GET_DIRECTORY_ARRAY roots ~%MOD_FOLDER%~ ~^\(%npctype%\)$~ 
		
		ACTION_PHP_EACH roots AS _ => rootdir BEGIN
			GET_DIRECTORY_ARRAY gamedirs ~%rootdir%~ ~^\(%game%\)$~	
			LAF strip_prefix STR_VAR string = ~%rootdir%~ prefix = ~%MOD_FOLDER%/~ 
				RET root = suffix END			
			LOG ~%root%:~
			
			ACTION_PHP_EACH gamedirs AS _ => gamedir BEGIN 
				GET_DIRECTORY_ARRAY genders ~%gamedir%~ ~^\(%gender%\)$~
				LAF strip_prefix STR_VAR string = ~%gamedir%~ prefix = ~%rootdir%/~ 
					RET gamename = suffix END
				LOG ~  %gamename%:~
				
				ACTION_PHP_EACH genders AS _ => genderdir BEGIN
					GET_DIRECTORY_ARRAY npcs ~%genderdir%~ ~^\(%name%\)$~
					LAF strip_prefix STR_VAR string = ~%genderdir%~ prefix = ~%gamedir%/~
						RET sex = suffix END
					LOG ~    %sex%:~
				
					ACTION_PHP_EACH npcs AS _ => npcdir BEGIN
						LAF strip_prefix STR_VAR string = ~%npcdir%~ prefix = ~%genderdir%/~
							RET npcname = suffix END
						LOG ~      %npcname%:~
						
						ACTION_IF DIRECTORY_EXISTS ~%npcdir%/alternatives~ THEN BEGIN
							LOG ~        used_files:~
							LAF list_selected_alteratives STR_VAR npc = ~%npcdir%~
								RET used_files END

							GET_DIRECTORY_ARRAY versions ~%npcdir%/alternatives~ ~%anydir%~

							ACTION_PHP_EACH versions AS _ => versiondir BEGIN
								LAF strip_prefix STR_VAR string = ~%versiondir%~ prefix = ~%npcdir%/alternatives/~  
									RET version = suffix END
								LOG ~        %version%:~
								GET_FILE_ARRAY altfiles ~%versiondir%~ ~%portrait_file%~
								
								ACTION_PHP_EACH altfiles AS _ => altfile BEGIN
									LAF check_file_legibility 
										STR_VAR file = ~%altfile%~ exclude = ~%exclude%~ when = ~%when%~
										RET eligible END
																			
									ACTION_IF eligible THEN BEGIN
										LAF base_file_name STR_VAR dir = ~%versiondir%~ file = ~%altfile%~ 
											RET basename filename END
											
										ACTION_PHP_EACH used_files AS _ => used_file BEGIN
											ACTION_IF ~%used_file%~ STR_EQ ~%versiondir%/%basename%~ THEN BEGIN
												OUTER_SET eligible = 0
												LOG ~          ignoring '%filename%' (selected alternative)~
											END
										END
										ACTION_IF eligible THEN BEGIN
											LOG ~          '%filename%': '%altfile%'~
											OUTER_TEXT_SPRINT $unused_files(~%count%~) ~%altfile%~
											OUTER_SET count += 1
										END
									END
								END
								ACTION_CLEAR_ARRAY altfiles
							END
							ACTION_CLEAR_ARRAY versions
							ACTION_CLEAR_ARRAY selections	
							ACTION_CLEAR_ARRAY used_files
						END
					END
					ACTION_CLEAR_ARRAY npcs
				END
				ACTION_CLEAR_ARRAY genders
			END
			ACTION_CLEAR_ARRAY gamedirs
		END
		ACTION_CLEAR_ARRAY roots
				
		ACTION_IF NOT filecount THEN BEGIN
			ACTION_DEFINE_ASSOCIATIVE_ARRAY unused_files BEGIN ~~ => ~~ END
		END
		
	END






DEFINE_ACTION_FUNCTION grant_pc_unused_alternatives
	STR_VAR
		npctype = ~~
		game = ~~
		gender = ~male\|female~
		name = ~~
		exclude = ~~
		when = ~used~
		target = ~~	
	RET
		female_portraits 
		male_portraits 
	BEGIN
		LAF directory_defaults STR_VAR game = ~%game%~ gender = ~%gender%~ name = ~%name%~
			RET game gender name END
/*			
		ACTION_IF (~%game%~ STRING_EQUAL ~~) THEN BEGIN 
			OUTER_TEXT_SPRINT game ~%game_dirs%~
		END
		ACTION_IF (~%name%~ STRING_EQUAL ~~) THEN BEGIN
			OUTER_TEXT_SPRINT name ~%any_dir%~
		END
*/
		ACTION_IF target STR_EQ ~~ THEN BEGIN
			OUTER_TEXT_SPRINT target ~%pc_install_target%~
		END
		
		LOG ~Grant PC unused alternative portraits of %npctype%/%game%/%gender%/%name% when %when%~
		ACTION_IF NOT exclude STR_EQ ~~ THEN BEGIN
			LOG ~Exclulde files: %exclude%~
		END
		
		OUTER_TEXT_SPRINT female_portraits ~~
		OUTER_TEXT_SPRINT male_portraits ~~
		
		LAF list_unused_npc_alternatives
			STR_VAR npctype = ~%npctype%~ game = ~%game%~ gender = ~%gender%~ name = ~%name%~
			        exclude = ~%exclude%~ when = ~%when%~
			RET_ARRAY unused_files END
		
		ACTION_DEFINE_ARRAY genders BEGIN ~male~ ~female~ END
		
		ACTION_PHP_EACH genders AS _ => sex BEGIN
			LOG ~%sex%:~
			OUTER_TEXT_SPRINT alternatives_dir ~%MOD_DIR%/charname/alternatives/%sex%~
			GET_FILE_ARRAY portraitsets ~%alternatives_dir%~ ~%any_dir%~
			
			ACTION_PHP_EACH portraitsets AS _ => dir BEGIN
				LAF strip_prefix STR_VAR string = ~%dir%~ prefix = ~%alternatives_dir%/~
					RET set = prefix END
				LOG ~  %set%:~
				
				//GET_FILE_ARRAY portraits ~%dir%~ ~.*\.\(ref\|refs\)^~
				ACTION_DEFINE_ASSOCIATIVE_ARRAY portraits BEGIN END
				
				GET_FILE_ARRAY refs ~%dir%~ ~.*\.ref^~
				ACTION_PHP_EACH refs AS _ => file BEGIN
					LAF ref_target STR_VAR reffile = ~%file%~ RET qname = target END
					LAF base_file_name STR_VAR dir = ~%dir%~ file = ~%file%~ extension = ~ref~
						RET basename END
					OUTER_TEXT_SPRINT $portraits(~%basename%~) ~%qname%~
				END
				ACTION_CLEAR_ARRAY refs
				
				GET_FILE_ARRAY refs ~%dir%~ ~.*\.refs^~
				ACTION_PHP_EACH refs AS _ => file BEGIN
					LAF refs_targets STR_VAR refsfile = ~%file%~ RET count RET_ARRAY targets = refs END
					
					ACTION_PHP_EACH targets AS basename => qname BEGIN
						OUTER_TEXT_SPRINT $portraits(~%basename%~) ~%qname%~
					END
					ACTION_CLEAR_ARRAY targets
				END
				ACTION_CLEAR_ARRAY refs
				
				ACTION_PHP_EACH portraits AS basename => file BEGIN
					OUTER_SET unused = 0
					OUTER_PATCH_SAVE qname ~%file%~ BEGIN
						REPLACE_TEXTUALLY CASE_SENSITIVE EVALUATE_REGEXP ~\.\(ref\|bmp\)^~ ~~
					END
					
					ACTION_PHP_EACH unused_files AS _ => unused_file BEGIN
						ACTION_IF ~%unused_file%~ STR_EQ ~%qname%~ THEN BEGIN
							OUTER_SET unused = 1
							LAF copy_portrait	
								STR_VAR 
									file = ~%MOD_FOLDER%/%file%~ 
									name = ~%basename%~ 
									target = ~%target%~ 
									exclude = ~%exclude%~ 
									when = ~%when%~
								RET copied END
							ACTION_IF copied THEN BEGIN
								ACTION_IF ~%sex%~ STR_EQ ~male~ THEN BEGIN
									OUTER_TEXT_SPRINT male_portraits ~%male_portraits%/%basename%/~
								END ELSE BEGIN
									OUTER_TEXT_SPRINT female_portraits ~%female_portraits%/%basename%/~
								END
							END
						END
					END
					ACTION_IF NOT unused THEN BEGIN
						LOG ~            ignoring '%basename%': '%file%' (used alternative)~
					END
				END				
				ACTION_CLEAR_ARRAY portraits
			END

		END
		
	END

